#include "cache.h"

void CACHE::llc_prefetcher_initialize() 
{
    cout << "LLC Next Line Prefetcher" << endl;
}

int total_operate = 0;
int was_next_line = 0;
uint64_t prev_prediction = 0;

uint32_t CACHE::llc_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint32_t metadata_in, uint64_t instr_id, uint64_t curr_cycle)
{

    //increment the total count
    total_operate++;


    uint64_t pf_addr = ((addr>>LOG2_BLOCK_SIZE)+1) << LOG2_BLOCK_SIZE;


    //if we predicted this address increment the counter
    if(addr == prev_prediction){
        was_next_line++;
    }

    //update the previous prediction
    prev_prediction = pf_addr;
    prefetch_line(ip, addr, pf_addr, FILL_LLC, 0);

  return metadata_in;
}

uint32_t CACHE::llc_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
  return metadata_in;
}

void CACHE::llc_prefetcher_final_stats()
{
  cout << "LLC Next Line Prefetcher Final Stats: none" << endl;
cout << "total operate " << total_operate << endl; 
cout << "was next line " << was_next_line << endl; 

}

uint32_t CACHE::llc_prefetcher_prefetch_hit(uint64_t addr, uint64_t ip, uint32_t metadata_in)
{
    return metadata_in;
}

/*
void CACHE::llc_prefetcher_print_config()
{
	
}*/

void CACHE::llc_prefetcher_broadcast_bw(uint8_t bw_level)
{

}

void CACHE::llc_prefetcher_broadcast_ipc(uint8_t ipc)
{
    printf("ipc was %d\n", ipc);
}

void CACHE::llc_prefetcher_broadcast_acc(uint32_t acc_level)
{

}
